{
    "shebang and coding": {
        "prefix": "shebang",
        "body": "#!/usr/bin/env python\\n# coding=utf-8\\n\\n\\n$0",
        "description": "adds shebang and coding lines"
    },
    "list comprehension": {
        "prefix": "lc",
        "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
        "description" : "List comprehension for creating a list based on existing lists."
    },
    "list comprehension if else": {
        "prefix": "lc.if_else",
        "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:iterable}]$0",
        "description" : "List comprehension for creating a list based on existing lists, with conditional if-else statement."
    },
    "list comprehension if": {
        "prefix": "lc.if",
        "body": "[${1:value} for ${2:value} in ${3:iterable} if ${4:condition}$0]",
        "description" : "List comprehension for creating a list based on existing lists, with conditional if statement."
    },
    "list comprehension - nested": {
        "prefix": "lc.nested",
        "body": "[[${1:j} for ${2:j} in ${4:inner_iterable}] for ${5:i} in ${6:outer_iterable}]$0",
        "description" : "list comprehension - make list of lists"
    },
    "list comprehension - flatten": {
        "prefix": "lc.flatten",
        "body": "[${1:val} for ${2:sublist} in ${3:matrix} for ${4:val} in ${5:sublist}]$0",
        "description" : "list comprehension - flatten nested iterables"
    },
    "list comprehension - flatten - if": {
        "prefix": "lc.flattenif",
        "body": "[${1:val} for ${2:sublist} in ${3:matrix} for ${4:val} in ${5:sublist} if ${6:condition}]$0",
        "description": "list comprehension - flatten nested iterables - if"
    },
    "list comprehension - multiline string to lists of words": {
        "prefix": "lc.multiline_string_to_lists_of_words",
        "body": "[[${1:word} for ${2:word} in ${3:line}.split()] for ${4:line} in ${5:multiline_string}.split('\\n')]$0",
        "description": "list comprehension - multiline string to a list of lists of words"
    },
    "list comprehension - multiline file to lists of words": {
        "prefix": "lc.multiline_file_to_lists_of_words",
        "body": "[[${1:word} for ${2:word} in ${3:line}.split()] for ${4:line} in ${5:file_object}.readlines()]$0",
        "description": "list comprehension - multiline file to a list of lists of words"
    },
    "list comprehension - flatten - partially 2d array": {
        "prefix": "lc.flatten_partially_2d_array",
        "body": "[${1:x} for ${2:element} in ${3:partially_2d_array} for ${4:x} in (${5:element} if isinstance(${6:element}, list) else [${7:element}])]$0",
        "description": "list comprehension - flatten a partially 2d array"
    }
}